/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/assets/': {
    /**
     * Get a list of assets
     * @description Used for fetching a (paginated) list of assets stored in the database.
     *
     * Allows searching by arbitrary strings, sorting by date or name, adding keyword filters, and adding offset for pagination.
     */
    get: operations['get_assets_api_v1_assets__get'];
    /**
     * Create a new asset, not including initial version
     * @description Creating a new asset in the database. Does not include initial version -- followed up with POST to `/assets/{uuid}` to upload an initial version.
     */
    post: operations['new_asset_api_v1_assets__post'];
  };
  '/api/v1/assets/names': {
    /**
     * Get a list of asset names
     * @description Used for fetching a list of the names of assets stored in the database.
     */
    get: operations['get_assets_names_api_v1_assets_names_get'];
  };
  '/api/v1/assets/{uuid}': {
    /**
     * Get info about a specific asset
     * @description Based on `uuid`, fetches information on a specific asset.
     */
    get: operations['get_asset_info_api_v1_assets__uuid__get'];
    /**
     * Update asset metadata
     * @description Based on `uuid`, updates information for a specific asset.
     */
    put: operations['put_asset_api_v1_assets__uuid__put'];
    /**
     * Delete asset metadata
     * @description Based on `uuid`, deletes a specific asset.
     */
    delete: operations['delete_asset_api_v1_assets__uuid__delete'];
  };
  '/api/v1/assets/{uuid}/versions': {
    /** Get a list of versions for a given asset */
    get: operations['get_asset_versions_api_v1_assets__uuid__versions_get'];
    /** Upload a new version for a given asset */
    post: operations['new_asset_version_api_v1_assets__uuid__versions_post'];
  };
  '/api/v1/assets/{uuid}/versions/{semver}/file': {
    /** Download Version File */
    get: operations['download_version_file_api_v1_assets__uuid__versions__semver__file_get'];
  };
  '/api/v1/users/': {
    /**
     * Get a list of users
     * @description Fetches a list of users from the database. Optionally, add a search parameter to filter results.
     */
    get: operations['get_users_api_v1_users__get'];
    /** Create a new user in the database */
    post: operations['new_user_api_v1_users__post'];
  };
  '/api/v1/users/token': {
    /** Login with PennKey and password */
    post: operations['login_for_access_token_api_v1_users_token_post'];
  };
  '/api/v1/users/me': {
    /**
     * Get info about the current user
     * @description Based on the provided token, fetches information on the current user.
     */
    get: operations['read_users_me_api_v1_users_me_get'];
  };
  '/api/v1/users/{pennkey}': {
    /**
     * Get info about a specific user
     * @description Based on `pennkey`, fetches information on a specific user.
     */
    get: operations['get_user_info_api_v1_users__pennkey__get'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Asset */
    Asset: {
      /** Asset Name */
      asset_name: string;
      /** Keywords */
      keywords: string;
      /** Image Uri */
      image_uri: string | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Author Pennkey */
      author_pennkey: string;
    };
    /** AssetCreate */
    AssetCreate: {
      /** Asset Name */
      asset_name: string;
      /** Keywords */
      keywords: string;
      /** Image Uri */
      image_uri: string | null;
    };
    /** AssetInfo */
    AssetInfo: {
      asset: components['schemas']['Asset'];
      /** Versions */
      versions: components['schemas']['Version'][];
    };
    /** Body_login_for_access_token_api_v1_users_token_post */
    Body_login_for_access_token_api_v1_users_token_post: {
      /** Grant Type */
      grant_type?: string | null;
      /** Username */
      username: string;
      /** Password */
      password: string;
      /**
       * Scope
       * @default
       */
      scope?: string;
      /** Client Id */
      client_id?: string | null;
      /** Client Secret */
      client_secret?: string | null;
    };
    /** Body_new_asset_version_api_v1_assets__uuid__versions_post */
    Body_new_asset_version_api_v1_assets__uuid__versions_post: {
      /**
       * File
       * Format: binary
       */
      file: string;
      /** Message */
      message: string;
      /**
       * Is Major
       * @default false
       */
      is_major?: boolean;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][];
    };
    /** Token */
    Token: {
      /** Access Token */
      access_token: string;
      /** Token Type */
      token_type: string;
    };
    /** User */
    User: {
      /** Pennkey */
      pennkey: string;
      /** First Name */
      first_name: string;
      /** Last Name */
      last_name: string;
      /**
       * School
       * @enum {string}
       */
      school: 'sas' | 'seas' | 'wharton';
    };
    /** UserCreate */
    UserCreate: {
      /** Pennkey */
      pennkey: string;
      /** First Name */
      first_name: string;
      /** Last Name */
      last_name: string;
      /**
       * School
       * @enum {string}
       */
      school: 'sas' | 'seas' | 'wharton';
      /** Password */
      password: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** Version */
    Version: {
      /** Message */
      message: string;
      /**
       * Asset Id
       * Format: uuid
       */
      asset_id: string;
      /** Semver */
      semver: string;
      /** Author Pennkey */
      author_pennkey: string;
      /**
       * Date
       * Format: date-time
       */
      date: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /**
   * Get a list of assets
   * @description Used for fetching a (paginated) list of assets stored in the database.
   *
   * Allows searching by arbitrary strings, sorting by date or name, adding keyword filters, and adding offset for pagination.
   */
  get_assets_api_v1_assets__get: {
    parameters: {
      query?: {
        search?: string | null;
        keywords?: string | null;
        sort?: 'date_asc' | 'name_asc' | 'date_dsc' | 'name_dsc';
        offset?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Asset'][];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Create a new asset, not including initial version
   * @description Creating a new asset in the database. Does not include initial version -- followed up with POST to `/assets/{uuid}` to upload an initial version.
   */
  new_asset_api_v1_assets__post: {
    requestBody: {
      content: {
        'application/json': components['schemas']['AssetCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Asset'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Get a list of asset names
   * @description Used for fetching a list of the names of assets stored in the database.
   */
  get_assets_names_api_v1_assets_names_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': string[];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get info about a specific asset
   * @description Based on `uuid`, fetches information on a specific asset.
   */
  get_asset_info_api_v1_assets__uuid__get: {
    parameters: {
      path: {
        uuid: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['AssetInfo'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Update asset metadata
   * @description Based on `uuid`, updates information for a specific asset.
   */
  put_asset_api_v1_assets__uuid__put: {
    parameters: {
      path: {
        uuid: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AssetCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Delete asset metadata
   * @description Based on `uuid`, deletes a specific asset.
   */
  delete_asset_api_v1_assets__uuid__delete: {
    parameters: {
      path: {
        uuid: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Get a list of versions for a given asset */
  get_asset_versions_api_v1_assets__uuid__versions_get: {
    parameters: {
      query?: {
        sort?: 'asc' | 'desc';
        offset?: number;
      };
      path: {
        uuid: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Version'][];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Upload a new version for a given asset */
  new_asset_version_api_v1_assets__uuid__versions_post: {
    parameters: {
      path: {
        uuid: string;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_new_asset_version_api_v1_assets__uuid__versions_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Download Version File */
  download_version_file_api_v1_assets__uuid__versions__semver__file_get: {
    parameters: {
      path: {
        uuid: string;
        semver: string;
      };
    };
    responses: {
      /** @description Download the version file as a zip archive */
      200: {
        content: {
          'application/json': unknown;
          'application/zip': unknown;
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Get a list of users
   * @description Fetches a list of users from the database. Optionally, add a search parameter to filter results.
   */
  get_users_api_v1_users__get: {
    parameters: {
      query?: {
        query?: string | null;
        offset?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['User'][];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Create a new user in the database */
  new_user_api_v1_users__post: {
    requestBody: {
      content: {
        'application/json': components['schemas']['UserCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['User'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /** Login with PennKey and password */
  login_for_access_token_api_v1_users_token_post: {
    requestBody: {
      content: {
        'application/x-www-form-urlencoded': components['schemas']['Body_login_for_access_token_api_v1_users_token_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Token'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  /**
   * Get info about the current user
   * @description Based on the provided token, fetches information on the current user.
   */
  read_users_me_api_v1_users_me_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['User'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get info about a specific user
   * @description Based on `pennkey`, fetches information on a specific user.
   */
  get_user_info_api_v1_users__pennkey__get: {
    parameters: {
      path: {
        pennkey: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['User'];
        };
      };
      /** @description Not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
}
